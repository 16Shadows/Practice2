
<script type="text/javascript" id="ContainerVM">
	function ContainerVM(containerId, parentPageVM) {
		var self = this;

		self.id = ko.observable();
		self.type = ko.observable();
		self.width = ko.observable();
		self.height = ko.observable();
		self.coordX = ko.observable();
		self.coordY = ko.observable();
		self.objectDMOs = ko.observableArray();
		self.ParentPageVM = parentPageVM;

		//fetch to load initial coords, size and content
		fetch("/Organizers/Container/" + containerId + "/content")
			.then(response => response.json())
			.then((json) => {
				ko.mapping.fromJS(json, {}, self);
				return json;
			})
			.catch(error => console.error('Unable to get items.', error));

		self.SetContent = function (data, event) {
			console.log(data);
		};

		self.DeleteContainer = function (data, event) {
			console.log(data);
			fetch("/Organizers/Container/delete/" + data.id(),
			{ method: "DELETE" })
				.then((response) => {
					// check if deletion was successful
					if (response.status == Number(202)) {
						debugger;
						console.log("deleted");
						var parentContainer = data.ParentPageVM.containerDMOs;
						if (parentContainer != null) {
							parentContainer.remove(data);
						}
					}

					return response;
				})
				.catch(error => console.error('Unable to delete items.', error));

		};
	}

</script>

<script id="ContainerObserver" type="text/javascript">
	//set observer for container creation anywhere on the document
	var target = document;
	const config = { childList: true, subtree: true };
	const callback = function (mutationsList, observer) {
		for (let mutation of mutationsList) {
			if (mutation.type === 'childList') {
				mutation.addedNodes.forEach((node) => {
					if (typeof node.classList != "undefined") {
						// Set draggable and resizable properties for DMOcontainer
						if (node.classList.contains("DMOcontainer")) {
							//.............................Drag
							var parent = node.closest(".PageContentContainer");
							var parentRect = parent.getBoundingClientRect();

							// set container coordinates relative to page
							$(node).draggable();

							//set rules - parent container and handle
							$(node).draggable("option", "containment", "parent");
							$(node).draggable("option", "handle", "#contDraggable");

							// function to update coordinates on server
							$(node).draggable({
								stop: function (event, ui) {
									var newX = ui.position.left;
									var newY = ui.position.top;
									var containerID = event.target.getAttribute("id");
									debugger;
									var data = {
										"CoordX": newX,
										"CoordY": newY,
										"Width": null,
										"Height": null,
										"Type": null
									};

									//fetch to update coordinates
									fetch("/Organizers/Container/update/" + containerID,
									{
										method: "PUT",
										headers: { 'Content-Type': 'application/json' },
										body: JSON.stringify(data)
									})
										.then(response => {
											console.log(response);
											return response;
										})
										.catch(error => console.error('Unable to update items.', error));
								}
							});

							//.............................Resize
							$(node).resizable();
							//set rules
							$(node).resizable("option", "handles", "se");
							$(node).resizable("option", "containment", "parent");
							$(node).resizable("option", "minHeight", getComputedStyle(document.querySelector('.DMOcontainer')).minHeight);
							$(node).resizable("option", "minWidth", getComputedStyle(document.querySelector('.DMOcontainer')).minWidth);

							// Set function to update server data
							$(node).resizable({
								stop: function (event, ui) {
									debugger;
									var newWidth = Math.floor(ui.size.width);
									var newHeight = Math.floor(ui.size.height);
									var containerID = event.target.getAttribute("id");

									//fetch to update size
									var data = {
										"Width": newWidth,
										"Height": newHeight,
										"CoordX": null,
										"CoordY": null,
										"Type": null
									};

									//fetch to update coordinates
									fetch("/Organizers/Container/update/" + containerID,
									{
										method: "PUT",
										headers: { 'Content-Type': 'application/json' },
										body: JSON.stringify(data)
									})
										.then(response => {
											console.log(response);
											return response;
										})
										.catch(error => console.error('Unable to update items.', error));
								}
							});
						}
					}

				});
			}
		}
	};
	const ContainerObserver = new MutationObserver(callback);
	//set observer
	ContainerObserver.observe(target, config);
</script>

