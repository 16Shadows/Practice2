<style>
	.DMOcontainer {
		width: 200px;
		height: 150px;
		min-width:100px;
		min-height: 40px;

		padding: 2px;
		position: absolute;
		z-index: 9;
		background-color: white;
		display:flex;
		flex-direction: column;
	}

	.containerHeader{
		flex: 0;
		z-index: 10;
		display:flex;
	}

	.draggable {
		width:stretch;
		min-width: 20px;
		min-height: 20px;

		cursor: move;
		box-sizing: border-box;
		background-color: darkgray;
		flex:0;
	}

	.content{
		flex:1;
		overflow: auto;
		margin-top:0px;
		margin-right:10px;
		margin-left:10px;
		margin-bottom:10px;
	}

	.resizeButton{
		min-width: 10px;
		min-height: 10px;
		max-width:10px;
		max-height:10px;
		cursor:se-resize;
		background-color:grey;

		position:absolute;
		bottom:0px;
		right:0px;
		flex:2;
	}
</style>

<div class="DMOcontainer" id="cont">
	<div class="container containerHeader">
		<div class="draggable" id="contDraggable"></div>
		<button id="setB" class="btn btn-outline-primary btn-sm">Set</button>
		<button id="delB" class="btn btn-danger btn-sm">&times;</button>
	</div>
    
    <div class="content">
        dfDSFdfsdfffMRmrmrrRRrffffffffffffff
    </div>
	<div class="ui-resizable-se resizeButton"></div>
</div>

<!--Initial load-->
<script type="text/javascript">
	debugger;
	require('jquery-ui/jquery-ui');
	//fetch to load initial coords, size and content
	//need knockout to create component of inner content
	
	var ContVM = {
		id: ko.observable(),
		type: ko.observable(),
		width: ko.observable(),
		height: ko.observable(),
		coordX: ko.observable(),
		coordY: ko.observable()
	};

	//............................Drag
	// Set rules and get relative parent only after full page load to avoid errors
	OnLoadCallback.push(() => {
		new function () {
			debugger;
			var parent = $("div.DMOcontainer").parent(".page")[0];
			var parentRect = parent.getBoundingClientRect();

			// set database coordinates relative to page
			$("div.DMOcontainer").first().draggable();

			//set rules - parent container and handle
			$("div.DMOcontainer").first().draggable("option", "containment", "parent");
			$("div.DMOcontainer").first().draggable("option", "handle", "#contDraggable");

			// function to update coordinates on server
			$("div.DMOcontainer").first().draggable({ stop: RootVM.DragStopFunc });
		}

	});

	RootVM.DragStopFunc = function () {
		var offset = $(this).offset();
		var xPos = offset.left;
		var yPos = offset.top;
		//console.log(xPos - parentRect.left, yPos - parentRect.top);

		// fetch to update coords
	}

	//.............................Resize
	// Set rules only after full page load to avoid errors
	OnLoadCallback.push(() => {
		new function () {
			debugger;

			$(".DMOcontainer").resizable();
			//set rules
			$(".DMOcontainer").resizable("option", "handles", "se");
			$(".DMOcontainer").resizable("option", "containment", "parent");
			$(".DMOcontainer").resizable("option", "minHeight", getComputedStyle(document.querySelector('.DMOcontainer')).minHeight);
			$(".DMOcontainer").resizable("option", "minWidth", getComputedStyle(document.querySelector('.DMOcontainer')).minWidth);

			// Set function to update server data
			$(".selector").resizable({ stop: ResizeStopFunc });
		}
	});

	RootVM.ResizeStopFunc = function (event, ui) {
		var newWidth = ui.size[0];
		var newHeight = ui.size[1];

		console.log(newWidth, newHeight);
		//fetch to update size
	}
//<script src="~/lib/jquery-ui/jquery-ui.js" type="text/javascript">
</script>


<script type="text/javascript">
	
	
</script>

<!--Resize-->
<script type="text/javascript">


</script>