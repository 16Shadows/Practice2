<style>
	.DMOcontainer {
		width: 200px;
		height: 150px;
		min-width:100px;
		min-height: 40px;

		padding: 2px;
		position: absolute;
		z-index: 9;
		background-color: white;
		display:flex;
		flex-direction: column;
	}

	.containerHeader{
		flex: 0;
		z-index: 10;
		display:flex;
	}

	.draggable {
		min-width: 20px;
		min-height: 20px;

		cursor: move;
		box-sizing: border-box;
		background-color: darkgray;
		flex:0;
	}

	.content{
		flex:1;
		overflow: auto;
		margin-top:0px;
		margin-right:10px;
		margin-left:10px;
		margin-bottom:10px;
	}

	.resizeButton{
		min-width: 10px;
		min-height: 10px;
		max-width:10px;
		max-height:10px;
		cursor:se-resize;
		background-color:grey;

		position:absolute;
		bottom:0px;
		right:0px;
		flex:2;
	}
</style>

<div class="DMOcontainer" id="ContainerViewTemplate">
	<div class="container containerHeader">
		<div class="draggable" id="contDraggable"></div>
		<button id="setB" class="btn btn-outline-primary btn-sm">Set</button>
		<button id="delB" class="btn btn-danger btn-sm">&times;</button>
	</div>
    
    <div class="content">
        dfDSFdfsdfffMRmrmrrRRrffffffffffffff
    </div>
	<div class="ui-resizable-se resizeButton"></div>
</div>


<script type="text/javascript" id="ContainerVM">
	function ContainerVM(containerId) {
		var self = this;
		debugger;
		require('jquery-ui/jquery-ui');

		this.id = ko.observable();
		this.type = ko.observable();
		this.width = ko.observable();
		this.height = ko.observable();
		this.coordX = ko.observable();
		this.coordY = ko.observable();


		//fetch to load initial coords, size and content
		//need knockout to create component of inner content


		//............................Drag
		// Set rules and get relative parent only after full page load to avoid errors

		this.loadResize() {
			debugger;
			var parent = $("div.DMOcontainer").parent(".page")[0];
			var parentRect = parent.getBoundingClientRect();

			// set database coordinates relative to page
			$("div.DMOcontainer").first().draggable();

			//set rules - parent container and handle
			$("div.DMOcontainer").first().draggable("option", "containment", "parent");
			$("div.DMOcontainer").first().draggable("option", "handle", "#contDraggable");

			// function to update coordinates on server
			$("div.DMOcontainer").first().draggable({ stop: RootVM.DragStopFunc });
		};

		this.DragStopFunc = function () {
			var offset = $(this).offset();
			var xPos = offset.left;
			var yPos = offset.top;
			//console.log(xPos - parentRect.left, yPos - parentRect.top);

			// fetch to update coords
		}

		//.............................Resize
		// Set rules only after full page load to avoid errors
		this.loadDrag() {
			debugger;

			$(".DMOcontainer").resizable();
			//set rules
			$(".DMOcontainer").resizable("option", "handles", "se");
			$(".DMOcontainer").resizable("option", "containment", "parent");
			$(".DMOcontainer").resizable("option", "minHeight", getComputedStyle(document.querySelector('.DMOcontainer')).minHeight);
			$(".DMOcontainer").resizable("option", "minWidth", getComputedStyle(document.querySelector('.DMOcontainer')).minWidth);

			// Set function to update server data
			$(".selector").resizable({ stop: ResizeStopFunc });
		};

		this.ResizeStopFunc = function (event, ui) {
			var newWidth = ui.size[0];
			var newHeight = ui.size[1];

			console.log(newWidth, newHeight);
			//fetch to update size
		}

		OnLoadCallback.push(() => {
			this.loadResize();
			this.loadDrag();
		});
	}
</script>
