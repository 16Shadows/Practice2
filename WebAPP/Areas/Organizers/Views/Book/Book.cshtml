<!--
	architorture: 
	1) current selected page view, 
		area must support page scrolling, if page can't fit inside,

	2) list of current book pages, with context menu (add page, 
		delete page, add container? change page positions?)
		pages in list are selectable
		page icon?

	++between - dragbar to change areas proportions,
				page-list and page-area(?) has min-width
-->
<style>
	.book {
		min-height: 200px;
		background-color: darkgray; /*for debug*/
		margin: 10px;
		display: flex;
	}
	.pageViewContainer {
		width: 75%;
		min-width: 200px;
		overflow: auto;
	}
	.resizer {
		cursor: ew-resize;
		width:5px;
		background-color: grey;
	}

</style>

<!--Body-->
<div class="book">
	<div class="pageViewContainer"></div>
	<div class="resizer" id="dragbar"></div>
	<div>
		<ul data-bind="foreach: BookVM.pageDMOs" class="list-group" id="pageListContainer" style="min-width:50px; width:stretch;">
			<li class="list-group-item">
				<span>
					<span data-bind="text: $data.id"> (id)</span>
					<span data-bind="text: $data.position"> (pos)</span>
				</span>
			</li>
		</ul>
	</div>
	
</div>

<!--Initial load-->
<script type="text/javascript">
	// Id of this book view instance
	RootVM.BookID = @ViewData["BookID"];
	RootVM.ActivePage = ko.observable();

	var BookVM =
	{
		id: ko.observable(),
		name: ko.observable(),
		parentCategoryId: ko.observable(),
		pageDMOs: ko.observableArray()
	};

	// request list data after page loading
	OnLoadCallback.push(() => {
		fetch("/Organizers/Book/" + RootVM.BookID + "/content")
			.then(response => response.json())
			.then(json => ko.mapping.fromJS(json,{}, BookVM))
            .catch(error => console.error('Unable to get items.', error));
	});
</script>

<!--List of book's pages-->

<!--resizer-->
<script type="text/javascript">
	// Get elements
	const resizer = document.getElementById('dragbar');
	const leftContainer = resizer.previousElementSibling;
	const rightContainer = resizer.nextElementSibling;

	// current mouse position
	let x = 0;
	let y = 0;
	let leftWidth = 0;

	// mouse down event handler
	const mouseDownHandler = function (e) {
		// Get the current mouse position
		x = e.clientX;
		y = e.clientY;
		leftWidth = leftContainer.getBoundingClientRect().width;

		// Attach the listeners to `document`
		document.addEventListener('mousemove', mouseMoveHandler);
		document.addEventListener('mouseup', mouseUpHandler);
	};

	// mouse move event handler
	const mouseMoveHandler = function (e) {
		// How far the mouse has been moved
		const dx = e.clientX - x;
		const dy = e.clientY - y;

		const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;
		leftContainer.style.width = `${newLeftWidth}%`;

		resizer.style.cursor = 'col-resize';
		document.body.style.cursor = 'col-resize';

		leftContainer.style.userSelect = 'none';
		leftContainer.style.pointerEvents = 'none';

		rightContainer.style.userSelect = 'none';
		rightContainer.style.pointerEvents = 'none';
	};

	// mouse up event handler
	const mouseUpHandler = function () {
		resizer.style.removeProperty('cursor');
		document.body.style.removeProperty('cursor');

		leftContainer.style.removeProperty('user-select');
		leftContainer.style.removeProperty('pointer-events');

		rightContainer.style.removeProperty('user-select');
		rightContainer.style.removeProperty('pointer-events');

		// Remove the handlers of `mousemove` and `mouseup`
		document.removeEventListener('mousemove', mouseMoveHandler);
		document.removeEventListener('mouseup', mouseUpHandler);
	};

	// Attach the handler
	resizer.addEventListener('mousedown', mouseDownHandler);

</script>


