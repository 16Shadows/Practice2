<script src="~/lib/dgoguerra-bootstrap-menu/dist/BootstrapMenu.min.js"></script>

<script type="text/html" id="PageViewTemplate" src="~/Organizers/Views/Page/Page.cshtml"></script>
<script type="text/html" id="test-template">
	<h3 data-bind = "text: $data.id"></h3>
</script>
<!--
	architorture: 
	1) current selected page view, 
		area must support page scrolling, if page can't fit inside,

	2) ++list of current book pages,
		with context menu (add page, delete page, add container? change page positions?)
		pages in list are selectable
		page icon?

	++between - dragbar to change areas proportions,
				page-list and page-area(?) has min-width
-->
<style>
	.book {
		min-height: 200px;
		max-height:500px;
		background-color: darkgray; /*for debug*/
		margin: 10px;
		display: flex;
		overflow: auto;
	}
	.pageViewContainer {
		width: 75%;
		min-width: 200px;
		overflow: auto;
		align-items:center;
		padding:20px;
	}
	.resizer {
		cursor: ew-resize;
		width:5px;
		background-color: grey;
	}

</style>

<!--Body-->
<div class="book">
	<div class="pageViewContainer" id="pageVC">
		<div id="mainPageView" data-bind="template: {name: 'test-template' , data:RootVM.ActivePage }"></div>
		<!--<partial name="../Page/Page" style="margin:auto;"></partial>-->
	</div>
	<div class="resizer" id="dragbar"></div>
	<div style="overflow: auto;">
		<table class="table" id="pageTable">
			<thead style="background-color:white;">
				<tr>
					<th scope="col">Page</th>
					<th scope="col">Add container</th>
					<th scope="col">Delete page</th>
				</tr>
			</thead>
			<tbody id="pageListContainer" data-bind="foreach: BookVM.pageDMOs" style="background-color:white; min-width:50px;">
				<tr data-bind="attr: {id: $data.id}, click: $parent.SelectActivePage">
					<td data-bind="text: $data.position" style="align-content:center;"></td>
					<td><input data-bind="attr: {id: $data.id}, click: $parent.AddContainerOnPage" type="button" class="btn btn-outline-primary btn-sm" value="+" style="align-content:center;"></td>
					<td><input data-bind="attr: {id: $data.id}, click: $parent.DeletePage" type="button" class="btn btn-outline-danger btn-sm" value="&times" style="align-content:center;"></td>

				</tr>

			</tbody>
			
		</table>
		<table id="addPgBth">
			<tr>
				<td><input onclick="AddPage()" type="button" class="btn btn-primary btn-sm" value="Add page" style="align-content:center; background-color:none;"></td>
			</tr>
		</table>
	</div>
</div>

<!--Initial load-->
<script type="text/javascript">
	// Id of this book view instance
	RootVM.BookID = @ViewData["BookID"];
	// Active page to be displayed in left area
	RootVM.ActivePage = ko.observableArray();


	//ko.components.register('currentPageView', {
	//	viewModel: {require: ""},
	//	template: {require: "~/Organizers/Page/Page.cshtml"}
	//});

	// Book view model
	var BookVM = {
		id: ko.observable(),
		name: ko.observable(),
		parentCategoryId: ko.observable(),
		pageDMOs: ko.observableArray()
	};

	// request list data after page loading
	OnLoadCallback.push(() => {
		fetch("/Organizers/Book/" + RootVM.BookID + "/content")
			.then(response => response.json())
			.then(json => ko.mapping.fromJS(json,{}, BookVM))
            .catch(error => console.error('Unable to get items.', error));
	});

	// Select row and set new active page view
	RootVM.SelectActivePage = function(row){
		debugger;
		var newPage = row;

		if (RootVM.ActivePage() != newPage)
		{
			
			// need to change colors to mark selected row
			RootVM.ActivePage(row);
		}
	}

	// Create new page and add in the last position of the book
	function AddPage(){

		let newPos;
		// calculate unique position for new page
		if (BookVM.pageDMOs().length == 0) {
			newPos = 1;
		}
		else {
			// 'add page' pushes new page with biggest position at the end of array
			var obj = BookVM.pageDMOs()[BookVM.pageDMOs().length - 1];
			newPos = obj.position() + 1;
		}

		fetch("/Organizers/Page/create/" + BookVM.id() + "/" + newPos,
		{ method: "POST" })
			.then(response => response.json())
			.then(json => BookVM.pageDMOs.push(ko.mapping.fromJS(json.pages[0])))
            .catch(error => console.error('Unable to add items.', error));

	}

	// Add new blanc container on chosen page
	function AddContainerOnPage(elem){
		console.log("add cont on ", this);
	}

	// Delete chosen page from book, other page's position will be updated
	RootVM.DeletePage = function(row) {

		// Id of page, represented by table row
		var pId = row.id();

		fetch("/Organizers/Page/delete/" + BookVM.id() + "/" + pId,
		{method: "DELETE"})
		.then((response) => {
			// check if deletion was successful
			if (response.status == Number(202)){
				// check if deleted page was open as view
				if (RootVM.ActivePage().length >= 1)
				{
					if (RootVM.ActivePage()[RootVM.ActivePage().length-1].id() == pId) 
					{
						RootVM.ActivePage.removeAll();
					}
					
				}
			}
			else
			{
				console.error("Something went wrong when deleting. Page pos:",
					row.position(),
					response.status);
			}
			
			return response.json();
		})
		.then(json => ko.mapping.fromJS(json.pages, {}, BookVM.pageDMOs))
		.catch(error => console.error('Unable to delete items.', error));
	}
</script>


<!--resizer-->
<script type="text/javascript">
	// Get elements
	const resizer = document.getElementById('dragbar');
	const leftContainer = resizer.previousElementSibling;
	const rightContainer = resizer.nextElementSibling;

	// current mouse position
	let x = 0;
	let y = 0;
	let leftWidth = 0;

	// mouse down event handler
	const mouseDownHandler = function (e) {
		// Get the current mouse position
		x = e.clientX;
		y = e.clientY;
		leftWidth = leftContainer.getBoundingClientRect().width;

		// Attach the listeners to `document`
		document.addEventListener('mousemove', mouseMoveHandler);
		document.addEventListener('mouseup', mouseUpHandler);
	};

	// mouse move event handler
	const mouseMoveHandler = function (e) {
		// How far the mouse has been moved
		const dx = e.clientX - x;
		const dy = e.clientY - y;

		const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;
		leftContainer.style.width = `${newLeftWidth}%`;

		resizer.style.cursor = 'col-resize';
		document.body.style.cursor = 'col-resize';

		leftContainer.style.userSelect = 'none';
		leftContainer.style.pointerEvents = 'none';

		rightContainer.style.userSelect = 'none';
		rightContainer.style.pointerEvents = 'none';
	};

	// mouse up event handler
	const mouseUpHandler = function () {
		resizer.style.removeProperty('cursor');
		document.body.style.removeProperty('cursor');

		leftContainer.style.removeProperty('user-select');
		leftContainer.style.removeProperty('pointer-events');

		rightContainer.style.removeProperty('user-select');
		rightContainer.style.removeProperty('pointer-events');

		// Remove the handlers of `mousemove` and `mouseup`
		document.removeEventListener('mousemove', mouseMoveHandler);
		document.removeEventListener('mouseup', mouseUpHandler);
	};

	// Attach the handler
	resizer.addEventListener('mousedown', mouseDownHandler);

</script>


