<style>
	.book {
		min-height: 200px;
		max-height:500px;
		background-color: darkgray; /*for debug*/
		margin: 10px;
		display: flex;
		overflow: auto;
	}
	.pageViewContainer {
		width: 75%;
		min-width: 200px;
		overflow: auto;
		align-items:center;
		padding:20px;
	}
	.resizer {
		cursor: ew-resize;
		width:5px;
		background-color: grey;
	}

</style>

<script type="text/javascript">
	// Book view model
	var BookVM = {
		id: ko.observable(),
		name: ko.observable(),
		parentCategoryId: ko.observable(),
		pageDMOs: ko.observableArray()
	};

	// Id of this book view instance
	var BookID = @ViewData["BookID"];
	BookVM.ActivePageVM = ko.observable(null);

	// request list data after page loading
	OnLoadCallback.push(() => {
		fetch("/Organizers/Book/" + BookID + "/content")
			.then(response => response.json())
			.then(json => ko.mapping.fromJS(json.books[0], {}, BookVM))
			.catch(error => console.error('Unable to get items.', error));
	});

	// Select row and set new active page view
	BookVM.SelectActivePage = function (row) {
		var newPageId = row.id();

		if (BookVM.ActivePageVM() != null) {
			if (BookVM.ActivePageVM().id() != newPageId) {
				// need to change colors to mark selected row
				BookVM.ActivePageVM(new ActivePageVM(newPageId));
			}
		}
		else {
			// need to change colors to mark selected row
			BookVM.ActivePageVM(new ActivePageVM(newPageId));
		}

	}

	// Create new page and add in the last position of the book
	BookVM.AddPage = function () {
		debugger;
		let newPos;
		// calculate unique position for new page
		if (BookVM.pageDMOs().length == 0) {
			newPos = 1;
		}
		else {
			// 'add page' pushes new page with biggest position at the end of array
			var obj = BookVM.pageDMOs()[BookVM.pageDMOs().length - 1];
			newPos = obj.position() + 1;
		}

		fetch("/Organizers/Page/create/" + BookVM.id() + "/" + newPos,
		{ method: "POST" })
			.then(response => response.json())
			.then(json => BookVM.pageDMOs.push(ko.mapping.fromJS(json.value.pages[0])))
			.catch(error => console.error('Unable to add items.', error));
	}

	// Add new blanc container on chosen page
	BookVM.AddContainerOnPage = function (row, event) {
		event.stopPropagation();
		// post new default container on page
		
		fetch("/Organizers/Container/create/" + row.id() + "/",
		{ method: "POST" })
			.then(response => response.json())
			.catch(error => console.error('Unable to add items.', error));
	}

	// Delete chosen page from book, other page's position will be updated
	BookVM.DeletePage = function (row, event) {
		debugger;
		event.stopPropagation();
		var pId = row.id();

		fetch("/Organizers/Page/delete/" + BookVM.id() + "/" + pId,
		{ method: "DELETE" })
			.then((response) => {
				debugger;
				// check if deletion was successful
				if (response.status == Number(202)) {
					//check if deleted page was open as view
					if (BookVM.ActivePageVM() != null) {
						if (BookVM.ActivePageVM().id() == pId) {
							BookVM.ActivePageVM(null);
						}
					}
				}
				else {
					console.error("Something went wrong when deleting. Page pos:",
						row.position(),
						response.status);
				}

				return response.json();
			})
			.then(json => ko.mapping.fromJS(json.pages, {}, BookVM.pageDMOs))
			.catch(error => console.error('Unable to delete items.', error));
	}
</script>

<!--PAGE VM SCRIPT-->
<partial name="../Page/Page.js"></partial>


<!-- Templates for page VM-->
<script id="page-fallback-template" type="text/html">
	<h3>No page is selected</h3>
</script>

<script id="page-template" type="text/html">
	<div data-bind="using: BookVM.ActivePageVM">
		<partial name="../Page/Page"/>
	</div>
</script>


<!--Body-->
<div class="book">
	<div class="pageViewContainer" id="pageVC">
		<div data-bind="template: {name: (BookVM.ActivePageVM() ? 'page-template' : 'page-fallback-template'), data:ActivePageVM}"></div>
	</div>

	<div class="resizer" id="dragbar"></div>

	<div style="overflow: auto;">
		<table class="table" id="pageTable">
			<thead style="background-color:white;">
				<tr>
					<th scope="col">Page</th>
					<th scope="col">Add container</th>
					<th scope="col">Delete page</th>
				</tr>
			</thead>
			<tbody id="pageListContainer" data-bind="foreach: BookVM.pageDMOs" style="background-color:white; min-width:50px;">
				<tr data-bind="attr: {id: $data.id}, click: BookVM.SelectActivePage">
					<td data-bind="text: $data.position" style="align-content:center;"></td>
					<td><input data-bind="attr: {id: $data.id}, click: BookVM.AddContainerOnPage" type="button" class="btn btn-outline-primary btn-sm" value="+" style="align-content:center;"></td>
					<td><input data-bind="attr: {id: $data.id}, click: BookVM.DeletePage" type="button" class="btn btn-outline-danger btn-sm" value="&times" style="align-content:center;"></td>
				</tr>
			</tbody>
		</table>
		<table id="addPgBth">
			<tr>
				<td><input onclick="BookVM.AddPage()" type="button" class="btn btn-primary btn-sm" value="Add page" style="align-content:center; background-color:none;"></td>
			</tr>
		</table>
	</div>
</div>

<!--resizer-->
<partial name="_resizer.js"></partial>