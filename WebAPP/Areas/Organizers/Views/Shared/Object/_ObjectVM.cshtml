
<script type="text/javascript" id="ContainerVM">
	function ObjectVM(objectId, parentVM) {
		var self = this;
		this.id = ko.observable();
		this.organizer = ko.observable();
		this.organizerId = ko.observable();
		// format: type-of-content id
		this.linkToObject = ko.observable(null);
		this.parent = parentVM;

		//actual data
		this.document = ko.observable();

		this.SearchForDocumentVM = async function (idToSearch, dataTarget) {

			// get promise for data
			var documents = await dataTarget.documents.getPromise();
			var subcategories = await dataTarget.subcategories.getPromise();

			// check documents first
			documents.forEach(d => {
				if (d.id == idToSearch) {
					self.document(d);
					d.ObjectParents.push(self);
					return d; //result
				}
			});
			// then check subcategories
			subcategories.forEach((category) => 
			{
				return self.SearchForDocumentVM(self.linkToObject().split(" ")[1], category);
			});

			// if no object was found
			return false;

		}

		this.ObjectContentTemplate = ko.pureComputed(() => {
			if (this.document() != null) {
				return 'DocumentViewTemplate';
			}
			else {
				return 'EmptyTemplate';
			}
		});

		this.Delete = function()
		{
			fetch("/Organizers/" + self.parent.organizerId() + "/Object/delete/" + self.id(),
			{ method: "DELETE" })
			.then((response) =>{
				if (response.ok)
				{
					self.parent.objectDMOs.remove(self);
				}
			});
		};

		// fetch to get object data
		fetch("/Organizers/" + self.parent.organizerId() + "/Object/" + objectId + "/content")
			.then(response => response.json())
			.then((json) => {
				ko.mapping.fromJS(json, {}, self);
				return json;
			})
			.then((json) => {
				if (self.linkToObject() != null) //loading content only if link is set
				{
					// if content exists in the organizer - get VM, else - delete object
					// documents
					if (self.linkToObject().split(" ")[0] == "document") {

						// start recursive search
						self.SearchForDocumentVM(self.linkToObject().split(" ")[1], RootVM.OrganizerVM);

					}
				}
				return json;
			})
			.catch(error => console.error('Unable to get items.', error));
	}

</script>
