<script type="text/javascript">
	ko.Mapper.Section = {
		create: function(options) {
			return new SectionVM(options.data, options.parent);
		}
	}

	/*
		sectionData - { id - int, name - string }
		parent - object
	*/
	function SectionVM(sectionData, parent) {
		this.organizerID = parent.organizerID;
		this.id = ko.utils.get(sectionData.id);
		this.name = ko.observable(sectionData.name).extend({ store : true });
		this.type = ko.observable(ko.utils.get(sectionData.type));
		this.loading = false;
		this.parent = parent;

		function loader(target) {
			if (target.loading != false)
				return;
			fetch("/Organizers/" + target.organizerID + "/section/" + target.id)
			.then(result => result.json())
			.then(json => ko.mapping.fromJS(json, { "sections" : ko.Mapper.Section }, target));
			//Free up memory
			delete target.loading;
		}

		this.sections = ko.onDemandObservableArray(loader, this);
		this.content = ko.onDemandObservable(loader, this).extend({ store : true });

		this.Rename = function(name) {
			name = name.trim();
			success = false;
			fetch("/Organizers/" + this.organizerID + "/section/" + this.id + "/rename", {
				method : "POST",
				headers : {
					"Content-Type" : "text/plain"
				},
				body : name
			})
			.then(response => {
				if (response.ok)
				{
					this.name(name);
					this.name.commit();
					success = true;
				}
			});
			return success;
		}

		this.SetContent = function(content) {
			success = false;
			fetch("/Organizers/" + this.organizerID + "/section/" + this.id + "/setContent", {
				method : "POST",
				headers : {
					"Content-Type": "text/plain"
				},
				body : content
			})
			.then(response => {
				if (response.ok)
				{
					this.content(content);
					this.content.commit();
					success = true;
				}
			});
			return success;
		}

		this.Delete = function() {
			fetch("/Organizers/" + this.organizerID + "/section/" + this.id + "/delete", {
				method : "DELETE"
			})
			.then(response => {
				if (response.ok)
					this.parent.sections.remove(this);
			});
		}

		this.CreateSection = function(name) {
			name = name.trim();
			fetch("/Organizers/" + this.organizerID + "/section/" + this.id + "/createSection", {
				method : "POST",
				headers : {
					"Content-Type": "text/plain"
				},
				body : name
			})
			.then(response => response.json())
			.then(json => this.sections.push(new SectionVM(json, this)));
		}

		@* Allow other parts of the script to patch this object as needed. Used instead of modifying prototype because its impossible to create observables using 'this' by extending the prototype. *@
		if (this.patch != undefined)
			this.patch();
	}
</script>