@*
	Dependencies:
		Category/_CategoryVM
*@

<script type="text/javascript">
	ko.Mapper.Organizer = {
		create : function(options) {
			return new OrganizerVM(options.data, options.parent);
		}
	};

	/*
		organizerData - { id - int, name - string }
		parent - OrganizersHostVM. May be null but must be set to use OrganizerModals
	*/
	function OrganizerVM(organizerData, parent) {
		this.organizerID = this.id = organizerData.id;
		this.name = ko.pureComputedEx({
			write : (value) => value?.trim(),
			initial : organizerData.name
		});
		this.parent = parent;
		this.type = ko.observable("Organizer");
		this.loading = false;

		var self = this;

		function loader(target)
		{
			if (target.loading != false)
				return;
			//Load actual data
			fetch("/Organizers/" + target.id + "/root")
			.then(response => response.json())
			.then(json => ko.mapping.fromJS(json, ko.Mapper.CategoryContent, target));
			//Free up memory
			delete target.loading;
		}

		this.subcategories = ko.onDemandObservableArray(loader, this);
		this.documents = ko.onDemandObservableArray(loader, this);
		this.books = ko.onDemandObservableArray(loader, this);

		this.CreateCategory = function(name) {
			name = name.trim();
			fetch("/Organizers/" + self.id + "/createCategory", {
				method : "POST",
				headers : {
					"Content-Type" : "text/plain"
				},
				body : name
			})
			.then(response => response.json())
			.then(json => self.subcategories.push(CategoryVM.get(json, self)));
		};

		this.CreateDocument = function(name) {
			name = name.trim();
			fetch("/Organizers/" + self.id + "/createDocument", {
				method : "POST",
				headers : {
					"Content-Type" : "text/plain"
				},
				body : name
			})
			.then(response => response.json())
			.then(json => self.documents.push(DocumentVM.get(json, self)));
		};

		this.CreateBook = function (name) {
			name = name.trim();
			fetch("/Organizers/" + self.id + "/createBook", {
				method: "POST",
				headers: {
					"Content-Type": "text/plain"
				},
				body: name
			})
				.then(response => response.json())
				.then(json => self.books.push(new BookVM(json.id, self)));
		};

		this.Rename = function(name) {
			name = name.trim();
			fetch("/Organizers/" + self.id + "/rename/", {
				method: "POST",
				headers : {
					"Content-Type" : "text/plain"
				},
				body : name
			})
			.then(response => {
				if (response.ok)
					self.name(name);
			});
		}

		this.Delete = function() {
			fetch("/Organizers/" + self.id, {
				method: "DELETE"
			})
			.then(response => {
				if (response.ok)
					self.parent.organizers.remove(self);
			});
		}

		@* Allow other parts of the script to patch this object as needed. Used instead of modifying prototype because its impossible to create observables using 'this' by extending the prototype. *@
		if (this.patch != undefined)
			this.patch();
	};

	OrganizerVM.Cache = {};
	OrganizerVM.get = function(data, parent) {
		if (OrganizerVM.Cache[data.id] != undefined)
			return OrganizerVM.Cache[data.id];
		return OrganizerVM.Cache[data.id] = new OrganizerVM(data, parent);
	}
</script>