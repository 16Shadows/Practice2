@*
	Dependencies:
		Organizer/_OrganizerVM
		utils.js
*@

<script type="text/javascript">
	/*
		organizerData - { id - int, name - string }
	*/
	function OrganizerTreeViewVM(organizerData, itemSelectedCallback) {
		itemSelectedCallback = itemSelectedCallback || (() => {});

		//Proxy to call the callback
		this.ItemSelected = function(item) {
			itemSelectedCallback(item);
		}

		//Call parent constructor last to ensure that patch() is called after all initialization is finished.
		OrganizerVM.call(this, organizerData);
	}

	//Patch documents and categories so that they have an will propagate ItemSelected event.
	CategoryVM.prototype.patch = utils.patch(CategoryVM.prototype.patch, function() {
		this.ItemSelected = utils.patch(this.ItemSelected, function (item) {
			this.parent.ItemSelected(item);
		});
	})

	DocumentVM.prototype.patch = utils.patch(DocumentVM.prototype.patch, function() {
		this.ItemSelected = utils.patch(this.ItemSelected, function (item) {
			this.parent.ItemSelected(item);
		});

		this.Delete = utils.patch(this.Delete, function () {
			this.parent.ItemSelected(null);
		});
	});
	// Book
	BookVM.prototype.ItemSelected = utils.patch(BookVM.prototype.ItemSelected, function (item) {
		this.parent.ItemSelected(item);
	});
	BookVM.prototype.patch = utils.patch(BookVM.prototype.patch, function () {
		this.Delete = utils.patch(this.Delete, function () {
			this.parent.ItemSelected(null);
		});
	});

	OrganizerTreeViewVM.Cache = {};
	OrganizerTreeViewVM.get = function(data, parent) {
		if (OrganizerTreeViewVM.Cache[data.id] != undefined)
			return OrganizerTreeViewVM.Cache[data.id];
		return OrganizerTreeViewVM.Cache[data.id] = OrganizerVM.Cache[data.id] = new OrganizerVM(data, parent);
	}
</script>