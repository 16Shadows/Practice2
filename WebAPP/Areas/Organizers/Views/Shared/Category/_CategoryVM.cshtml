@*
	Dependencies:
		Document/_DocumentVM
*@

<script type="text/javascript">
	ko.Mapper.Category = {
		create : function(options) {
			return new CategoryVM(options.data, options.parent);
		}
	}

	ko.Mapper.CategoryContent = {
		"subcategories" : ko.Mapper.Category,
		"documents" : ko.Mapper.Document,
		"books" : ko.Mapper.Book
	}

	/*
		categoryData - { id - int, name - string }
		parent - OrganizerVM or CategoryVM
	*/
	function CategoryVM(categoryData, parent) {
		var self = this;

		this.organizerID = parent.organizerID;
		this.id = categoryData.id;
		this.name = ko.pureComputedEx({
			write : (value) => value?.trim(),
			initial : categoryData.name
		});
		this.type = ko.observable("Category");
		this.parent = parent;
		this.loading = false;

		function loader(target)
		{
			if (target.loading != false)
				return;
			//Load actual data
			fetch("/Organizers/" + target.organizerID + "/category/" + target.id)
			.then(response => response.json())
			.then(json => ko.mapping.fromJS(json, ko.Mapper.CategoryContent, target));
			//Free up memory
			delete target.loading;
		}

		this.subcategories = ko.onDemandObservableArray(loader, this);
		this.documents = ko.onDemandObservableArray(loader, this);
		this.books = ko.onDemandObservableArray(loader, this);

		this.CreateCategory = function(name) {
			name = name.trim();
			fetch("/Organizers/" + self.organizerID + "/category/" + self.id + "/createCategory", {
				method : "POST",
				headers : {
					"Content-Type" : "text/plain"
				},
				body : name
			})
			.then(response => response.json())
			.then(json => self.subcategories.push(new CategoryVM(json, self)));
		};

		this.CreateDocument = function(name) {
			name = name.trim();
			fetch("/Organizers/" + self.organizerID + "/category/" + self.id + "/createDocument", {
				method : "POST",
				headers : {
					"Content-Type" : "text/plain"
				},
				body : name
			})
			.then(response => response.json())
			.then(json => self.documents.push(new DocumentVM(json, self)));
		};

		this.CreateBook = function(name) {
			debugger;
			name = name.trim();
			fetch("/Organizers/" + self.organizerID + "/category/" + self.id + "/createBook", {
				method : "POST",
				headers : {
					"Content-Type" : "text/plain"
				},
				body : name
			})
			.then(response => response.json())
			.then(json => self.books.push(new BookVM(json.id, self)));
		};

		this.Rename = function(name) {
			name = name.trim();
			fetch("/Organizers/" + self.organizerID + "/category/" + self.id + "/rename", {
				method : "POST",
				headers : {
					"Content-Type" : "text/plain"
				},
				body : name
			})
			.then(response => {
				if (response.ok)
					self.name(name);
			});
		};

		this.Delete = function() {
			fetch("/Organizers/" + self.organizerID + "/category/" + self.id, {
				method : "DELETE"
			})
			.then(response => {
				if (response.ok)
					self.parent.subcategories.remove(self);
			});
		};

		@* Allow other parts of the script to patch this object as needed. Used instead of modifying prototype because its impossible to create observables using 'this' by extending the prototype. *@
		if (this.patch != undefined)
			this.patch();
	};
</script>