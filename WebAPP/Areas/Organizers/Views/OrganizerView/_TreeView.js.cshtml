<script type="text/javascript">
	function TreeViewVM(organizerId, itemSelectedCallback) {
		this.OrganizerID = organizerId;
		this.ItemSelectedCallback = itemSelectedCallback;

		var TreeVM = this;

		//Mapper for categories
		this.TreeViewCategoryMapper = {
			create : function(options) {
				var result = ko.mapping.fromJS(options.data);

				function loader(target)
				{
					if (target.loading != false)
						return;
					//Load actual data
					fetch("/Organizers/" + TreeVM.OrganizerID + "/category/" + target.id())
					.then(response => response.json())
					.then(json => ko.mapping.fromJS(json, TreeVM.TreeViewNodeMapper, target));
					//Free up memory
					delete target.loading;
				}

				result.loading = false;
				result.subcategories = ko.onDemandObservableArray(loader, result);
				result.documents = ko.onDemandObservableArray(loader, result);
				result.parent = options.parent;
				result.TreeVM = TreeVM;

				return result;
			}
		}

		//Mapper for documents
		this.TreeViewDocumentMapper = {
			create: function(options) {
				var result = ko.mapping.fromJS(options.data);
				result.parent = options.parent;
				result.TreeVM = TreeVM;
				return result;
			}
		}

		//Mapper for root
		this.TreeViewNodeMapper = {
			"subcategories" : TreeVM.TreeViewCategoryMapper,
			"documents" : TreeVM.TreeViewDocumentMapper
		};

		//Items in root
		this.subcategories = ko.observableArray();
		this.documents = ko.observableArray();
		
		//Modal & operations properties
		this.newNameClean = ko.observable("");
		this.nameLookupObject = null;
		this.fallbackTargetObject = {name : ko.observable() };
		this.targetObject = ko.observable(TreeVM.fallbackTargetObject);
		this.newName = ko.pureComputed({
			read: TreeVM.newNameClean,
			write: (value) => TreeVM.newNameClean(value.trim())
		});

		this.newCategoryNameValid = ko.pureComputed(() => {
			if (TreeVM.newName().length == 0 || TreeVM.nameLookupObject == null)
				return false;
			for (i = 0; i < TreeVM.nameLookupObject.subcategories().length; i++)
			{
				if (TreeVM.nameLookupObject.subcategories()[i].name() != TreeVM.newName())
					continue;
				return false;
			}
			return true;
		});

		this.newDocumentNameValid = ko.pureComputed(() => {
			if (TreeVM.newName().length == 0 || TreeVM.nameLookupObject == null)
				return false;
			for (i = 0; i < TreeVM.nameLookupObject.documents().length; i++)
			{
				if (TreeVM.nameLookupObject.documents()[i].name() != TreeVM.newName())
					continue;
				return false;
			}
			return true;
		});

		//Operations
		this.CreateCategory = function() {
			var target = TreeVM.nameLookupObject;
			fetch("/Organizers/" + TreeVM.OrganizerID + (target == TreeVM ? "" : ("/category/" + target.id()))  + "/createCategory/" + TreeVM.newName(), {
				method : "POST"
			})
			.then(response => response.json())
			.then(json => target.subcategories.push(ko.mapping.fromJS(json, TreeVM.TreeViewCategoryMapper)));
		};

		this.CreateDocument = function() {
			var target = TreeVM.nameLookupObject;
			fetch("/Organizers/" + TreeVM.OrganizerID + (target == TreeVM ? "" : ("/category/" + target.id()))  + "/createDocument/" + TreeVM.newName(), {
				method : "POST"
			})
			.then(response => response.json())
			.then(json => target.documents.push(ko.mapping.fromJS(json, TreeVM.TreeViewDocumentMapper)));
		};

		this.RenameCategory = function() {
			var target = TreeVM.targetObject();
			fetch("/Organizers/" + TreeVM.OrganizerID + "/category/" + target.id() + "/rename/" + TreeVM.newName(), {
				method : "POST"
			})
			.then(response => response.json())
			.then(json => ko.mapping.fromJS(json, { }, target));
		};

		this.RenameDocument = function() {
			var target = TreeVM.targetObject();
			fetch("/Organizers/" + TreeVM.OrganizerID + "/document/" + target.id() + "/rename/" + TreeVM.newName(), {
				method : "POST"
			})
			.then(response => response.json())
			.then(json => ko.mapping.fromJS(json, { }, target));
		};

		this.DeleteCategory = function() {
			var target = TreeVM.targetObject();
			var parent = TreeVM.nameLookupObject;
			fetch("/Organizers/" + TreeVM.OrganizerID + "/category/" + target.id() + "/delete", {
				method : "DELETE"
			})
			.then(response => response.json())
			.then(json => parent.subcategories.remove(x => x.id() == json.id));
		};

		this.DeleteDocument = function() {
			var target = TreeVM.targetObject();
			var parent = TreeVM.nameLookupObject;
			fetch("/Organizers/" + TreeVM.OrganizerID + "/document/" + target.id() + "/delete", {
				method : "DELETE"
			})
			.then(response => response.json())
			.then(json => parent.documents.remove(x => x.id() == json.id));
		};

		//Proxy-function for callback in case I will need to do something else with it later.
		this.ItemSelected = function(item, event) {
			TreeVM.ItemSelectedCallback(item);
		};

		//Modal state setters
		this.ClearModalState = function() {
			TreeVM.targetObject(TreeVM.fallbackTargetObject);
			TreeVM.nameLookupObject = null;
			TreeVM.newName("");
		}

		this.SetCreateModalState = function() {
			TreeVM.nameLookupObject = ko.dataFor(ContextMenu.Source);
		}

		this.SetRenameDeleteModalState = function() {
			TreeVM.targetObject(ko.dataFor(ContextMenu.Source));
			TreeVM.newName(TreeVM.targetObject().name());
			TreeVM.nameLookupObject = TreeVM.targetObject().parent;
		}

		//Page-unique IDs for components provided by the partial
		this.CreateCategoryModalID = uid.next();
		this.CreateDocumentModalID = uid.next();
		this.RenameCategoryModalID = uid.next();
		this.RenameDocumentModalID = uid.next();
		this.DeleteCategoryModalID = uid.next();
		this.DeleteDocumentModalID = uid.next();

		this.CategoryContextMenuID = uid.next();
		this.DocumentContextMenuID = uid.next();
		this.RootContextMenuID = uid.next();

		this.CategoryTemplateID = uid.next();
		this.DocumentTemplateID = uid.next();

		//Load data after page load
		OnLoadCallback.push(() => {
			fetch("/Organizers/" + TreeVM.OrganizerID + "/root")
			.then(response => response.json())
			.then(json => ko.mapping.fromJS(json, TreeVM.TreeViewNodeMapper, TreeVM));
		});
	}
</script>