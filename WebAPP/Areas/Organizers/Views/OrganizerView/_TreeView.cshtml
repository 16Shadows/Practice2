<script type="text/javascript">
	//Mapper to use when mapping received categories to js objects
	var TreeViewCategoryMapper = {
		create : function(options) {
			var result = ko.mapping.fromJS(options.data);

			function loader(target)
			{
				if (target.loading != false)
					return;
				target.loading = true;
				//Load actual data
				fetch("/Organizers/" + RootVM.OrganizerID + "/category/" + target.id())
				.then(response => response.json())
				.then(json => ko.mapping.fromJS(json, TreeViewNodeMapper, target));
				//Free up memory
				delete target.loading;
			}

			result.loading = false;
			result.subcategories = ko.onDemandObservableArray(loader, result);
			result.documents = ko.onDemandObservableArray(loader, result);
			result.parent = options.parent;

			return result;
		}
	}

	var TreeViewDocumentMapper = {
		create: function(options) {
			var result = ko.mapping.fromJS(options.data);
			result.parent = options.parent;
			return result;
		}
	}
	
	var TreeViewNodeMapper = {
		"subcategories" : TreeViewCategoryMapper,
		"documents" : TreeViewDocumentMapper
	};

	//VM for tree view
	RootVM.TreeViewVM = {
		subcategories : ko.observableArray(),
		documents : ko.observableArray(),
		newNameClean : ko.observable(""),
		nameLookupObject : null,
		fallbackTargetObject : {
			name : ko.observable()
		}
	};
	RootVM.TreeViewVM.targetObject = ko.observable(RootVM.TreeViewVM.fallbackTargetObject);

	RootVM.TreeViewVM.newName = ko.pureComputed({
		read: RootVM.TreeViewVM.newNameClean,
		write: (value) => RootVM.TreeViewVM.newNameClean(value.trim())
	});

	RootVM.TreeViewVM.newCategoryNameValid = ko.pureComputed(() => {
		if (RootVM.TreeViewVM.newName().length == 0 || RootVM.TreeViewVM.nameLookupObject == null)
			return false;
		for (i = 0; i < RootVM.TreeViewVM.nameLookupObject.subcategories().length; i++)
		{
			if (RootVM.TreeViewVM.nameLookupObject.subcategories()[i].name() != RootVM.TreeViewVM.newName())
				continue;
			return false;
		}
		return true;
	});

	RootVM.TreeViewVM.newDocumentNameValid = ko.pureComputed(() => {
		if (RootVM.TreeViewVM.newName().length == 0 || RootVM.TreeViewVM.nameLookupObject == null)
			return false;
		for (i = 0; i < RootVM.TreeViewVM.nameLookupObject.documents().length; i++)
		{
			if (RootVM.TreeViewVM.nameLookupObject.documents()[i].name() != RootVM.TreeViewVM.newName())
				continue;
			return false;
		}
		return true;
	});

	RootVM.TreeViewVM.CreateCategory = function() {
		var target = RootVM.TreeViewVM.nameLookupObject;
		fetch("/Organizers/" + RootVM.OrganizerID + (target == RootVM.TreeViewVM ? "" : ("/category/" + target.id()))  + "/createCategory/" + RootVM.TreeViewVM.newName(), {
			method : "POST"
		})
		.then(response => response.json())
		.then(json => target.subcategories.push(ko.mapping.fromJS(json, TreeViewCategoryMapper)));
	};

	RootVM.TreeViewVM.CreateDocument = function() {
		var target = RootVM.TreeViewVM.nameLookupObject;
		fetch("/Organizers/" + RootVM.OrganizerID + (target == RootVM.TreeViewVM ? "" : ("/category/" + target.id()))  + "/createDocument/" + RootVM.TreeViewVM.newName(), {
			method : "POST"
		})
		.then(response => response.json())
		.then(json => target.documents.push(ko.mapping.fromJS(json, TreeViewDocumentMapper)));
	};

	RootVM.TreeViewVM.RenameCategory = function() {
		var target = RootVM.TreeViewVM.targetObject();
		fetch("/Organizers/" + RootVM.OrganizerID + "/category/" + target.id() + "/rename/" + RootVM.TreeViewVM.newName(), {
			method : "POST"
		})
		.then(response => response.json())
		.then(json => ko.mapping.fromJS(json, {}, target));
	};

	RootVM.TreeViewVM.RenameDocument = function() {
		var target = RootVM.TreeViewVM.targetObject();
		fetch("/Organizers/" + RootVM.OrganizerID + "/document/" + target.id() + "/rename/" + RootVM.TreeViewVM.newName(), {
			method : "POST"
		})
		.then(response => response.json())
		.then(json => ko.mapping.fromJS(json, {}, target));
	};

	RootVM.TreeViewVM.DeleteCategory = function() {
		var target = RootVM.TreeViewVM.targetObject();
		var parent = RootVM.TreeViewVM.nameLookupObject;
		fetch("/Organizers/" + RootVM.OrganizerID + "/category/" + target.id() + "/delete", {
			method : "DELETE"
		})
		.then(response => response.json())
		.then(json => parent.subcategories.remove(x => x.id() == json.id));
	};

	RootVM.TreeViewVM.DeleteDocument = function() {
		var target = RootVM.TreeViewVM.targetObject();
		var parent = RootVM.TreeViewVM.nameLookupObject;
		fetch("/Organizers/" + RootVM.OrganizerID + "/document/" + target.id() + "/delete", {
			method : "DELETE"
		})
		.then(response => response.json())
		.then(json => parent.documents.remove(x => x.id() == json.id));
	};

	//Load data after page load
	OnLoadCallback.push(() => {
		[
			$("#createCategoryModal")[0], 
			$("#createDocumentModal")[0],
			$("#renameCategoryModal")[0],
			$("#renameDocumentModal")[0],
			$("#deleteCategoryModal")[0],
			$("#deleteDocumentModal")[0]
		]
		.forEach(el => el.addEventListener("hidden.bs.modal", (event) => {
			RootVM.TreeViewVM.targetObject(RootVM.TreeViewVM.fallbackTargetObject);
			RootVM.TreeViewVM.nameLookupObject = null;
			RootVM.TreeViewVM.newName("");
		}));
		
		[
			$("#treeview-category-contextmenu-createcategory")[0],
			$("#treeview-category-contextmenu-createdocument")[0],
			$("#treeview-root-contextmenu-createcategory")[0],
			$("#treeview-root-contextmenu-createdocument")[0]
		]
		.forEach(el => el.addEventListener("click", (event) => RootVM.TreeViewVM.nameLookupObject = ko.dataFor(ContextMenu.Source)));

		[
			$("#treeview-category-contextmenu-rename")[0],
			$("#treeview-category-contextmenu-delete")[0],
			$("#treeview-document-contextmenu-rename")[0],
			$("#treeview-document-contextmenu-delete")[0]
		]
		.forEach(el => el.addEventListener("click", (event) => {
			RootVM.TreeViewVM.targetObject(ko.dataFor(ContextMenu.Source));
			RootVM.TreeViewVM.newName(RootVM.TreeViewVM.targetObject().name());
			RootVM.TreeViewVM.nameLookupObject = RootVM.TreeViewVM.targetObject().parent;
		}));

		fetch("/Organizers/" + RootVM.OrganizerID + "/root")
		.then(response => response.json())
		.then(json => ko.mapping.fromJS(json, TreeViewNodeMapper, RootVM.TreeViewVM));
	});
</script>

<script type="text/html" id="treeview-category-template">
	<li role="button" context-menu="#treeview-category-contextmenu">
		<strong>[C] </strong><span data-bind="text: name"></span>
		<ul data-bind="template: { name: 'treeview-category-template', foreach: subcategories }"></ul>
		<ul data-bind="template: { name: 'treeview-document-template', foreach: documents }"></ul>
	</li>
</script>

<script type="text/html" id="treeview-document-template">
	<li role="button" context-menu="#treeview-document-contextmenu">
		<strong>[D] </strong><span data-bind="text: name"></span>
	</li>
</script>

<div data-bind="using: TreeViewVM" style="height:100%">
	<div id="treeViewRoot" context-menu="#treeview-root-contextmenu" style="overflow:auto;height:100%">
		<ul class="mb-0" data-bind="template: { name: 'treeview-category-template', foreach: subcategories }"></ul>
		<ul data-bind="template: { name: 'treeview-document-template', foreach: documents }"></ul>
	</div>
</div>

<div id="treeview-document-contextmenu" class="card" style="display:none">
	<div class="row" role="button" id="treeview-document-contextmenu-rename" data-bs-toggle="modal" data-bs-target="#renameDocumentModal">
		<span>Rename</span>
	</div>
	<div class="row" role="button" id="treeview-document-contextmenu-delete" data-bs-toggle="modal" data-bs-target="#deleteDocumentModal">
		<span>Delete</span>
	</div>
</div>

<div id="treeview-category-contextmenu" class="card" style="display:none">
	<div class="row" role="button" id="treeview-category-contextmenu-createcategory" data-bs-toggle="modal" data-bs-target="#createCategoryModal">
		<span role="button">Create category</span>
	</div>
	<div class="row" role="button" id="treeview-category-contextmenu-createdocument" data-bs-toggle="modal" data-bs-target="#createDocumentModal">
		<span>Create document</span>
	</div>
	<div class="border"></div>
	<div class="row" role="button" id="treeview-category-contextmenu-rename" data-bs-toggle="modal" data-bs-target="#renameCategoryModal">
		<span>Rename</span>
	</div>
	<div class="row" role="button" id="treeview-category-contextmenu-delete" data-bs-toggle="modal" data-bs-target="#deleteCategoryModal">
		<span>Delete</span>
	</div>
</div>

<div id="treeview-root-contextmenu" class="card" style="display:none">
	<div class="row" id="treeview-root-contextmenu-createcategory" data-bs-toggle="modal" data-bs-target="#createCategoryModal">
		<a role="button">Create category</a>
	</div>
	<div class="row" id="treeview-root-contextmenu-createdocument" data-bs-toggle="modal" data-bs-target="#createDocumentModal">
		<a role="button">Create document</a>
	</div>
</div>

<div class="modal fade" id="createCategoryModal" data-bind="using: TreeViewVM" tabindex=-1>
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Creating category</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
			</div>
			<div class="modal-body">
				<span>Enter a unique name for the new category:</span>
				<input data-bind="textInput: newName"></input>
				<p />
				<span class="text-danger" data-bind="hidden: newCategoryNameValid">The name must be unique and not empty.</span>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-primary" data-bs-dismiss="modal" data-bind="click: CreateCategory, enable: newCategoryNameValid">
					Create
				</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="createDocumentModal" data-bind="using: TreeViewVM" tabindex=-1>
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Creating document</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
			</div>
			<div class="modal-body">
				<span>Enter a unique name for the new document:</span>
				<input data-bind="textInput: newName"></input>
				<p />
				<span class="text-danger" data-bind="hidden: newDocumentNameValid">The name must be unique and not empty.</span>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-primary" data-bs-dismiss="modal" data-bind="click: CreateDocument, enable: newDocumentNameValid">
					Create
				</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="renameCategoryModal" data-bind="using: TreeViewVM" tabindex=-1>
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Renaming category</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
			</div>
			<div class="modal-body">
				<span>Enter a unique name for the category:</span>
				<input data-bind="textInput: newName"></input>
				<p />
				<span class="text-danger" data-bind="hidden: newCategoryNameValid">The name must be unique and not empty.</span>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-primary" data-bs-dismiss="modal" data-bind="click: RenameCategory, enable: newCategoryNameValid">
					Rename
				</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="deleteCategoryModal" data-bind="using: TreeViewVM" tabindex=-1>
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Deleting category</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
			</div>
			<div class="modal-body">
				<span> Are you sure you want to delete <span data-bind="text: targetObject().name"></span>?</span>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" data-bs-dismiss="modal" data-bind="click: DeleteCategory">
					Delete
				</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="renameDocumentModal" data-bind="using: TreeViewVM" tabindex=-1>
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Renaming document</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
			</div>
			<div class="modal-body">
				<span>Enter a unique name for the document:</span>
				<input data-bind="textInput: newName"></input>
				<p />
				<span class="text-danger" data-bind="hidden: newDocumentNameValid">The name must be unique and not empty.</span>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-primary" data-bs-dismiss="modal" data-bind="click: RenameDocument, enable: newDocumentNameValid">
					Rename
				</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="deleteDocumentModal" data-bind="using: TreeViewVM" tabindex=-1>
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Deleting document</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
			</div>
			<div class="modal-body">
				<span> Are you sure you want to delete <span data-bind="text: targetObject().name"></span>?</span>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" data-bs-dismiss="modal" data-bind="click: DeleteDocument">
					Delete
				</button>
			</div>
		</div>
	</div>
</div>